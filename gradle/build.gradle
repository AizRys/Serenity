apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'net.serenity-bdd.aggregator'
apply from: 'dependencies.gradle'

group = 'thucydides.samples.serenity-gradle-plugin'
description = 'Sample Serenity project'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:1.1.1")
    }
}

dependencies {
    compile libs.slf4jSimple
    compile libs.serenity

    implCompile sourceSets.api.output

    testCompile libs.junit
    testCompile libs.hamcrest
    testCompile libs.serenityJunit
    testCompile libs.serenityJunit
    runtime configurations.apiRuntime
    runtime configurations.implRuntime
}

jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}

task e2e(type: Test) {
    options {
        systemProperties(System.getProperties())
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("${buildDir}/repo"))

            addFilter("main") { artifact, file -> artifact.name == project.name }
            ["api", "impl"].each { type ->
                addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }

                // We now have to map our configurations to the correct maven scope for each pom
                ["compile", "runtime"].each { scope ->
                    configuration = configurations[type + scope.capitalize()]
                    ["main", type].each { pomName ->
                        pom(pomName).scopeMappings.addMapping 1, configuration, scope
                    }
                }
            }

        }
    }
}

gradle.startParameter.continueOnFailure = true
